exports.id = "redux_tweets2_js-redux_user_js";
exports.ids = ["redux_tweets2_js-redux_user_js"];
exports.modules = {

/***/ "./redux/tweets2.js":
/*!**************************!*\
  !*** ./redux/tweets2.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initialState": function() { return /* binding */ initialState; },
/* harmony export */   "ADD_TWEET_REQUEST": function() { return /* binding */ ADD_TWEET_REQUEST; },
/* harmony export */   "ADD_TWEET_SUCCESS": function() { return /* binding */ ADD_TWEET_SUCCESS; },
/* harmony export */   "ADD_TWEET_FAIL": function() { return /* binding */ ADD_TWEET_FAIL; },
/* harmony export */   "LOAD_TWEET_REQUEST": function() { return /* binding */ LOAD_TWEET_REQUEST; },
/* harmony export */   "LOAD_TWEET_SUCCESS": function() { return /* binding */ LOAD_TWEET_SUCCESS; },
/* harmony export */   "LOAD_TWEET_FAIL": function() { return /* binding */ LOAD_TWEET_FAIL; },
/* harmony export */   "addtweet": function() { return /* binding */ addtweet; }
/* harmony export */ });
const initialState = {
  AddTweetAdding: false,
  AddTweetDone: false,
  AddTweetError: null,
  tweets: [],
  LoadTweetLoading: false,
  LoadTweetDone: false,
  LoadTweetError: null
};
const ADD_TWEET_REQUEST = "ADD_TWEET_REQUEST";
const ADD_TWEET_SUCCESS = "ADD_TWEET_SUCCESS ";
const ADD_TWEET_FAIL = "ADD_TWEET_FAIL ";
const LOAD_TWEET_REQUEST = "LOAD_TWEET_REQUEST";
const LOAD_TWEET_SUCCESS = "LOAD_TWEET_SUCCESS";
const LOAD_TWEET_FAIL = "LOAD_TWEET_FAIL";
const addtweet = data => ({
  type: ADD_TWEET_REQUEST,
  data
});

const tweetReducer = (state = initialState, action) => {
  switch (action.type) {
    case ADD_TWEET_REQUEST:
      state.AddTweetAdding = true;
      state.AddTweetDone = false;
      state.AddTweetError = null;
      break;

    case ADD_TWEET_SUCCESS:
      state.AddTweetAdding = false;
      state.AddTweetDone = true;
      state.tweets.unshift(action.data);
      break;

    case ADD_TWEET_FAIL:
      state.AddTweetAdding = false;
      state.AddTweetError = action.error;
      break;

    case LOAD_TWEET_REQUEST:
      state.LoadTweetLoading = true;
      state.LoadTweetDone = false;
      state.LoadTweetError = null;

    case LOAD_TWEET_SUCCESS:
      state.LoadTweetLoading = false;
      state.LoadTweetDone = true;
      state.LoadTweetError = null;
      state.tweets = state.tweets.concat(action.data);

    case LOAD_TWEET_FAIL:
      state.LoadTweetLoading = false;
      state.LoadTweetError = action.error;

    default:
      break;
  }

  return state;
};

/* harmony default export */ __webpack_exports__["default"] = (tweetReducer);

/***/ }),

/***/ "./redux/user.js":
/*!***********************!*\
  !*** ./redux/user.js ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initialState": function() { return /* binding */ initialState; },
/* harmony export */   "LOGIN_REQUEST": function() { return /* binding */ LOGIN_REQUEST; },
/* harmony export */   "LOGIN_SUCCESS": function() { return /* binding */ LOGIN_SUCCESS; },
/* harmony export */   "LOGIN_FAIL": function() { return /* binding */ LOGIN_FAIL; },
/* harmony export */   "SIGNUP_REQUEST": function() { return /* binding */ SIGNUP_REQUEST; },
/* harmony export */   "SIGNUP_SUCCESS": function() { return /* binding */ SIGNUP_SUCCESS; },
/* harmony export */   "SIGNUP_FAIL": function() { return /* binding */ SIGNUP_FAIL; },
/* harmony export */   "LOAD_INFO_REQUEST": function() { return /* binding */ LOAD_INFO_REQUEST; },
/* harmony export */   "LOAD_INFOP_SUCCESS": function() { return /* binding */ LOAD_INFOP_SUCCESS; },
/* harmony export */   "LOAD_INFO_FAIL": function() { return /* binding */ LOAD_INFO_FAIL; },
/* harmony export */   "logInAction": function() { return /* binding */ logInAction; },
/* harmony export */   "signUpAction": function() { return /* binding */ signUpAction; }
/* harmony export */ });
const initialState = {
  logInLoading: false,
  //try to login
  logInDone: false,
  logInError: null,
  loadInfoLoading: false,
  //load user info of logined
  loadInfoDone: false,
  loadInfoError: null,
  signUpLoading: false,
  //try to signup
  signUpDone: false,
  signUpError: null,
  myInfo: null,
  //Info of me
  userInfo: null //Info of other user

};
const LOGIN_REQUEST = "user/LOGIN_REQUEST";
const LOGIN_SUCCESS = "user/LOGIN_SUCESS";
const LOGIN_FAIL = "user/LOGIN_FAIL";
const SIGNUP_REQUEST = "user/SIGNUP_REQUEST";
const SIGNUP_SUCCESS = "user/SIGNUP_SUCESS";
const SIGNUP_FAIL = "user/SIGNUP_FAIL";
const LOAD_INFO_REQUEST = "user/LOAD_INFO_REQUEST";
const LOAD_INFOP_SUCCESS = "user/LOAD_INFO_SUCESS";
const LOAD_INFO_FAIL = "user/LOAD_INFO_FAIL";
const logInAction = data => {
  return {
    type: LOGIN_REQUEST,
    payload: data
  };
};
const signUpAction = data => {
  return {
    type: SIGNUP_REQUEST,
    payload: data
  };
};

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case LOGIN_REQUEST:
      state.logInLoading = true;
      state.logInDone = false;
      state.logInError = null;
      break;

    case LOGIN_SUCCESS:
      state.logInDone = true;
      state.logInLoading = false;
      state.logInError = null;
      state.myInfo = action.data;
      break;

    case LOGIN_FAIL:
      state.logInLoading = false;
      state.logInError = action.error;
      break;

    case SIGNUP_REQUEST:
      state.signUpLoading = true;
      state.signUpDone = false;
      state.signUpError = null;
      break;

    case SIGNUP_SUCCESS:
      state.signUpLoading = false;
      state.signUpDone = true;
      break;

    case SIGNUP_FAIL:
      state.signUpLoading = false;
      state.signUpError = action.error;
      break;

    default:
      break;
  }

  return state;
};

/* harmony default export */ __webpack_exports__["default"] = (userReducer);

/***/ })

};
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,